#!/usr/bin/env pwsh

class LiFo
{
    static [string] $Root = "/LiFo"
    static [string] $Mc = "/LiFo/Mc"
}

class PoGo
{
    static [string] $Root = "/Pogo"
}

if ($false)
{
    class Recipe
    {
        [string]   $Title
        [string[]] $Page
        [string]   $Name
        [string]   $Version
        [string[]] $Supplies
        [string]   $Configure
        [string]   $Build
        [string]   $Install
    
        hidden Recipe()
        {
        }
    
        static [Recipe] OutTheAir()
        {
            $recipe=[Recipe]::new()
    
            if (Test-Path variable:global:title)       { $recipe.Title = $global:title }
            if (Test-Path variable:global:page)        { $recipe.Page = $global:page }
            if (Test-Path variable:global:name)        { $recipe.Name = $global:name }
            if (Test-Path Variable:global:version)     { $recipe.Version = $global:version }
            if (Test-Path variable:global:supplies)    { $recipe.Supplies = $global:supplies }
            if (Test-Path variable:global:configure)   { $recipe.Configure = $global:configure }
            if (Test-Path variable:global:build)       { $recipe.Build = $global:build }
            if (Test-Path Variable:global:install)     { $recipe.Install = $global:install }
        
            return $recipe
        }
    
        Recipe([string]$title, [string[]]$page, [string]$name, [string]$version, [string[]]$supplies, [string]$configure, [string]$build, [string]$install)
        {
            $this.Title = $title
            $this.Page = $page
            $this.Name = $name
            $this.Version = $version
            $this.Supplies = $supplies
            $this.Configure = $configure
            $this.Build = $build
            $this.Install = $install
        }
    }
}

Function Download()
{
    param([string]$url)
}

function Load()
{
    param([string]$meta)

    $variables = "McName", "McVersion", "McTitle", "McDescription", "McHome", "McUpstream"

    [string]$McName=$null
    [string]$McVersion=$null
    [string]$McTitle=$null
    [string]$McDescription=$null
    [string[]]$McHome=$()
    [string]$McUpstream=$null
    [string]$McAssets=$null

    Invoke-Expression (Get-content $meta | Out-String)

    if ($McUpstream -and $true)
    { 
        $filename=(Split-Path -Leaf $McUpstream)
        $signature=$filename + ".sig"

        if (-not (Test-Path $filename))
        {
            Invoke-WebRequest -SkipCertificateCheck $McUpstream -OutFile $filename
        }
        if (-not (Test-Path $signature))
        {
            Invoke-WebRequest -SkipCertificateCheck ($McUpstream + ".sig") -OutFile $signature
        }
    }

    $props = @{}

    foreach ($variable in $variables)
    {
        $value = (Get-Item variable:$variable | Select-Object -ExpandProperty Value)
        $props.Add($variable, $value)
    }

    return $props

}

[hashtable[]]$mcs = @{}
foreach ($meta in Get-ChildItem -Path $([LiFo]::Mc) -Recurse -Depth 2 -Include Meta | Select-Object -ExpandProperty FullName)
{
    $rc=$(Load $meta)
    #$rc
    $homes=$rc['McHome']
    foreach ($h in $homes)
    {
        echo $("home: " + $h)
    }
}
