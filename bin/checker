#!/usr/bin/env pwsh

class LiFo
{
    static [string] Root() { return "/LiFo" }
    static [string] Mc() { return $([LiFo]::Root()) + "/Mc" }
}

class PoGo
{
    static [string] Root() { return "/Pogo" }
    static [string] DataRoot() { return $([PoGo]::Root()) + "/Data" }
    static [string] Archives() { return $([PoGo]::DataRoot()) + "/Archives" }
}

class Recipe
{
    [string]   $Name
    [string]   $Version
    [string]   $Title
    [string]   $Description
    [string[]] $Home
    [string]   $Upstream
    [string[]] $Assets
    [string[]] $BuildDeps
}

Function Unpack()
{
    param
    (
        [Parameter(Mandatory=$true, Position=0)] [string]$File,
        [Parameter(Mandatory=$true, Position=1)] [string]$IntoFolder
    )

    New-Item -Path $IntoFolder -ItemType Directory -Force
}

Function Remove-Schema()
{
    param
    (
        [Parameter(Mandatory=$true, Position=0)] [string]$Url
    )

    return $Url -replace 'http://', '' -replace 'https://', '' -replace 'ftp://'
}

Function Get-ArchiveFile()
{
    param
    (
        [Parameter(Mandatory=$true, Position=0)] [string]$Url
    )

    return Join-Path $([PoGo]::Archives()) $(Remove-Schema $Url)
}

Function Download()
{
    param
    (
        [Parameter(Mandatory=$true, Position=0)] [string]$Url
    )

    Write-Host "download $Url"

    if ($Url)
    { 
        $filename=Get-ArchiveFile $Url

        New-Item -Path $(Split-Path -Path $filename -Parent) -ItemType Directory -Force >$null

        if (-not (Test-Path $filename))
        {
            Invoke-WebRequest -SkipCertificateCheck $Url -OutFile $filename
        }
    }
}

function Load()
{
    param
    (
        [Parameter(Mandatory=$true, Position=0)] [string]$Meta
    )

    Write-Host "loading $Meta"

    [Recipe]$x = [Recipe]$(Import-PowerShellDataFile -LiteralPath $Meta)

    $x.Upstream = $($x.Upstream -replace '\$Name', $x.Name) -replace '\$Version', $x.Version

    return $x

}

[hashtable[]]$mcs = @{}

foreach ($meta in Get-ChildItem -Path $([LiFo]::Mc()) -Recurse -Depth 2 -Include Meta | Select-Object -ExpandProperty FullName)
{
    [Recipe]$recipe=$(Load $meta)
    Download $recipe.Upstream
}

# Idea from http://stackoverflow.com/questions/7468707/deep-copy-a-dictionary-hashtable-in-powershell 
function Get-ClonedObject
{
    param($DeepCopyObject)
    $memStream = new-object IO.MemoryStream
    $formatter = new-object Runtime.Serialization.Formatters.Binary.BinaryFormatter
    $formatter.Serialize($memStream,$DeepCopyObject)
    $memStream.Position=0
    $formatter.Deserialize($memStream)
}

function Get-TopologicalSort
{
    param
    (
        [Parameter(Mandatory = $true, Position = 0)] [hashtable] $edgeList
    )
  
    # Make sure we can use HashSet
    Add-Type -AssemblyName System.Core
  
    # Clone it so as to not alter original
    #$currentEdgeList = [hashtable] (Get-ClonedObject $edgeList)
    $currentEdgeList = $edgeList
  
    # algorithm from http://en.wikipedia.org/wiki/Topological_sorting#Algorithms
    $topologicallySortedElements = New-Object System.Collections.ArrayList
    $setOfAllNodesWithNoIncomingEdges = New-Object System.Collections.Queue
  
    $fasterEdgeList = @{}
  
    # Keep track of all nodes in case they put it in as an edge destination but not source
    $allNodes = New-Object -TypeName System.Collections.Generic.HashSet[object] -ArgumentList (,[object[]] $currentEdgeList.Keys)
  
    foreach($currentNode in $currentEdgeList.Keys)
    {
        $currentDestinationNodes = [array] $currentEdgeList[$currentNode]
        if($currentDestinationNodes.Length -eq 0)
        {
            $setOfAllNodesWithNoIncomingEdges.Enqueue($currentNode)
        }
  
        foreach($currentDestinationNode in $currentDestinationNodes)
        {
            if(!$allNodes.Contains($currentDestinationNode))
            {
                [void] $allNodes.Add($currentDestinationNode)
            }
        }
  
        # Take this time to convert them to a HashSet for faster operation
        $currentDestinationNodes = New-Object -TypeName System.Collections.Generic.HashSet[object] -ArgumentList (,[object[]] $currentDestinationNodes )
        [void] $fasterEdgeList.Add($currentNode, $currentDestinationNodes)
    }
  
    # Now let's reconcile by adding empty dependencies for source nodes they didn't tell us about
    foreach($currentNode in $allNodes)
    {
        if(!$currentEdgeList.ContainsKey($currentNode))
        {
            [void] $currentEdgeList.Add($currentNode, (New-Object -TypeName System.Collections.Generic.HashSet[object]))
            $setOfAllNodesWithNoIncomingEdges.Enqueue($currentNode)
        }
    }
  
    $currentEdgeList = $fasterEdgeList
  
    while($setOfAllNodesWithNoIncomingEdges.Count -gt 0)
    {
        $currentNode = $setOfAllNodesWithNoIncomingEdges.Dequeue()
        [void] $currentEdgeList.Remove($currentNode)
        [void] $topologicallySortedElements.Add($currentNode)
  
        foreach($currentEdgeSourceNode in $currentEdgeList.Keys)
        {
            $currentNodeDestinations = $currentEdgeList[$currentEdgeSourceNode]
            if($currentNodeDestinations.Contains($currentNode))
            {
                [void] $currentNodeDestinations.Remove($currentNode)
  
                if($currentNodeDestinations.Count -eq 0)
                {
                    [void] $setOfAllNodesWithNoIncomingEdges.Enqueue($currentEdgeSourceNode)
                }                
            }
        }
    }
  
    if($currentEdgeList.Count -gt 0)
    {
        throw "Graph has at least one cycle!"
    }
  
    return $topologicallySortedElements
  }

  # Sort the Wikipedia example:
  Get-TopologicalSort @{11=@(7,5);8=@(7,3);2=@(11);9=@(11,8);10=@(11,3)}