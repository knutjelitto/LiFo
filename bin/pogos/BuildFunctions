#!/bin/bash -eu (source-only)

[[ -z ${_buildFunctionsIncluded:-} ]] || exit
_buildFunctionsIncluded=true

BuildSetupRecipe ()
{
    RecipeSource "${1:-}"

    _buildSetupWith "$Recipe_Name-$Recipe_Version"
}

BuildSetupShell ()
{
    _buildSetupWith $(basename $(mktemp --dry-run --directory))
}

_buildSetupWith ()
{
    local with="$1"

    EnsurePogoEnvironment

    BuildHead="$PogoBuild/$with"
    BuildChroot=$BuildHead/Chroot
    BuildChanges=$BuildHead/Chroot/Changes
    BuildState=$BuildHead/State
}


BuildEnsureBuildHead ()
{
    local directories=(
        $BuildHead/Chroot/Root
        $BuildHead/Chroot/Changes
        $BuildHead/Chroot/Merged
        $BuildHead/Chroot/Work
        $BuildHead/State
    )
    MakeDir "${directories[@]}"
}

BuildCleanBuildHead ()
{
    rm $verbose --recursive --force $BuildHead
}

BuildCreateBuildHead ()
{
    BuildCleanBuildHead
    BuildEnsureBuildHead
}

BuildProvideSupplies ()
{
    local supply
    for supply in "${Recipe_Supplies[@]}"; do
        _buildProvideSupply $supply
    done
}

_buildProvideSupply ()
{
    local supply="$1"
    local basename=$(basename "$supply")

    [[ -f $PogoArchives/$basename ]] || Fatal "local archive '$basename' for supply '$supply' missing"

    local stem

    case $basename in
        *.tar.?? | *.tar.???)
            stem=${basename%.tar.*}
            _buildExtractSupply $basename $stem
            ln $verbose --symbolic --relative --force --no-target-directory $PogoSources/$stem $BuildHead/$stem
            ;;
        *)
            Fatal "can't provide supply '$supply'"
    esac
}

_buildExtractSupply ()
{
    local basename=$1
    local stem=$2
    local archive=$PogoArchives/$basename
    local extract=$PogoSources/$stem

    local tmpExtract=$extract.tmp

    rm $verbose --recursive --force $tmpExtract

    [[ -d $extract ]] && return

    mkdir $verbose --parents $tmpExtract

    pushd $tmpExtract >/dev/null
    tar xvf $archive
    popd >/dev/null

    if [[ $(ls -1 $tmpExtract | wc -l) == 1 ]]; then
        mv $verbose $tmpExtract/* $extract
        rmdir $verbose $tmpExtract
    else
        mv $verbose $tmpExtract $extract
    fi
}

BuildEnterMain ()
{
    if (( ${#Recipe_Supplies[@]} == 0 )); then
        Fatal "No supplies given"
    else
        local supply=${Recipe_Supplies[0]}
        local basename=$(basename $supply)
        local stem=${basename%.tar.*}
        cd $BuildHead/$stem
        #echo "PWD: $(pwd)"
    fi
}

BuildEnterBuildIn ()
{
    BuildEnterMain
    #echo "PWD: $(pwd)"
    if [[ -n "$Recipe_BuildIn" ]]; then
        #echo "Recipe_BuildIn: $Recipe_BuildIn"
        mkdir $verbose --parents ./$Recipe_BuildIn
        cd $Recipe_BuildIn
        #echo "PWD: $(pwd)"
    fi
}

MakeToolsRootfs ()
{
    local rootfs=$1

    RootfsMkDir ()
    {
        local mode="--mode=$1"
        shift 1
        while (( $# > 0 )); do
            local dir=$rootfs/$1
            shift
            mkdir $verbose --parents $mode $dir
        done
    }

    RootfsSymLn ()
    {
        local link=$rootfs/$1
        local target=$2
        
        ln $verbose --symbolic $target $link
    }

    RootfsMkDir 0775 LiFo
    RootfsMkDir 0775 root
    RootfsMkDir 0775 bin
    RootfsMkDir 0775 sbin
    RootfsMkDir 0775 etc
    RootfsMkDir 0775 lib
    RootfsMkDir 0775 lib64
    RootfsMkDir 1777 tmp
    RootfsMkDir 1777 dev
    RootfsMkDir 1777 proc
    RootfsMkDir 1777 sys
    RootfsMkDir 0775 run
    RootfsMkDir 0775 run/lock
    RootfsMkDir 0775 var
    RootfsMkDir 1777 var/tmp
    RootfsMkDir 0775 var/log
    RootfsMkDir 0775 var/cache
    RootfsMkDir 0775 var/lib
    RootfsMkDir 0775 usr/bin
    RootfsMkDir 0775 usr/sbin
    RootfsMkDir 0775 usr/include
    RootfsMkDir 0775 usr/lib
    RootfsMkDir 0775 usr/libexec
    RootfsMkDir 0775 usr/share
    RootfsMkDir 0775 usr/share/color
    RootfsMkDir 0775 usr/share/dict
    RootfsMkDir 0775 usr/share/doc
    RootfsMkDir 0775 usr/share/info
    RootfsMkDir 0775 usr/share/locale
    RootfsMkDir 0775 usr/share/man
    RootfsMkDir 0775 usr/share/misc
    RootfsMkDir 0775 usr/share/terminfo
    RootfsMkDir 0775 usr/share/zoneinfo
    RootfsMkDir 0775 usr/share/man/man{1..8}

    RootfsSymLn tools                   /Data/Compile/Lfs/tools

    RootfsSymLn bin/bash                /tools/bin/bash
    RootfsSymLn bin/sh                  bash
    RootfsSymLn bin/cat                 /tools/bin/cat
    RootfsSymLn bin/dd                  /tools/bin/dd
    RootfsSymLn bin/echo                /tools/bin/echo
    RootfsSymLn bin/ln                  /tools/bin/ln
    RootfsSymLn bin/pwd                 /tools/bin/pwd
    RootfsSymLn bin/rm                  /tools/bin/rm
    RootfsSymLn bin/stty                /tools/bin/stty

    RootfsSymLn usr/bin/install         /tools/bin/install
    RootfsSymLn usr/bin/perl            /tools/bin/perl
    RootfsSymLn usr/bin/env             /tools/bin/env

    RootfsSymLn usr/lib/libgcc_s.so     /tools/lib/libgcc_s.so
    RootfsSymLn usr/lib/libgcc_s.so.1   /tools/lib/libgcc_s.so.1

    RootfsSymLn usr/lib/libstdc++.a     /tools/lib/libstdc++.a
    RootfsSymLn usr/lib/libstdc++.so    /tools/lib/libstdc++.so
    RootfsSymLn usr/lib/libstdc++.so.6  /tools/lib/libstdc++.so.6

    touch $rootfs/etc/hostname
    touch $rootfs/etc/hosts
    touch $rootfs/etc/resolv.conf

    cat > $rootfs/etc/passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
EOF

    cat > $rootfs/etc/group << "EOF"
root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
input:x:24:
mail:x:34:
nogroup:x:99:
users:x:999:
EOF

    unset RootfsMkDir
    unset RootfsSymLn
}

ExecInToolsChroot ()
(   # execute in subshell

    local command="$1"

    local lowerdir="$BuildChroot/Root:$PogoVolume"
    local upperdir="$BuildChroot/Changes"
    local workdir="$BuildChroot/Work"
    local merged="$BuildChroot/Merged"

    local options=lowerdir=$lowerdir,upperdir=$upperdir,workdir=$workdir

    trap 'BuildUnmount || true' EXIT

    mount $verbose --types overlay overlay --options $options $merged
    
    mount $verbose --bind /LiFo $merged/LiFo
    mount $verbose --bind /root $merged/root
    mount $verbose --rbind /dev $merged/dev
    mount $verbose --rbind /sys $merged/sys
    mount $verbose --rbind /proc $merged/proc
    mount $verbose --bind /etc/hostname $merged/etc/hostname
    mount $verbose --bind /etc/hosts $merged/etc/hosts
    mount $verbose --bind /etc/resolv.conf $merged/etc/resolv.conf

    POGO_CHROOT=Tools           \
    LC_ALL=POSIX                \
    FORCE_UNSAFE_CONFIGURE=1    \
    MAKEFLAGS="-j8"             \
    chroot $merged /bin/bash -l -c "$command"
)

MakeBootsRootfs ()
{
    local rootfs=$1

    RootfsMkDir ()
    {
        local mode="--mode=$1"
        shift 1
        while (( $# > 0 )); do
            local dir=$rootfs/$1
            shift
            mkdir $verbose --parents $mode $dir
        done
    }

    RootfsSymLn ()
    {
        local link=$rootfs/$1
        local target=$2
        
        ln $verbose --symbolic $target $link
    }

    RootfsMkDir 0775 bin
    RootfsSymLn bin/sh      bash
    RootfsSymLn tools       /Data/Compile/Lfs/tools

    unset RootfsMkDir
    unset RootfsSymLn
}

ExecInBootsChroot ()
(   # execute in subshell

    local command="$1"

    local lowerdir="$BuildChroot/Root:$PogoVolume:/"
    local upperdir="$BuildChroot/Changes"
    local workdir="$BuildChroot/Work"
    local merged="$BuildChroot/Merged"

    local options=lowerdir=$lowerdir,upperdir=$upperdir,workdir=$workdir

    trap 'BuildUnmount || true' EXIT

    mount $verbose --types overlay overlay --options $options $merged
    
    mount $verbose --bind /LiFo $merged/LiFo
    mount $verbose --bind /root $merged/root
    mount $verbose --rbind /dev $merged/dev
    mount $verbose --rbind /sys $merged/sys
    mount $verbose --rbind /proc $merged/proc
    mount $verbose --bind /etc/hostname $merged/etc/hostname
    mount $verbose --bind /etc/hosts $merged/etc/hosts
    mount $verbose --bind /etc/resolv.conf $merged/etc/resolv.conf

    POGO_CHROOT=Boots               \
    LC_ALL=POSIX                    \
    LFS=/Data/Compile/Lfs           \
    LFS_TGT=x86_64-lfs-linux-gnu    \
    FORCE_UNSAFE_CONFIGURE=1        \
    MAKEFLAGS="-j8"                 \
    chroot $merged /bin/bash -l -c "$command"
)

BuildUnmount ()
{
    local match=$BuildChroot
    local mountpoint
    while mount | grep -q "${match}"; do
        mount | grep "${match}" | cut -f3 -d" " | sort | while read mountpoint; do
            if [[ -z $verbose ]]; then
                mountpoint --quiet ${mountpoint} &>/dev/null && umount --recursive ${mountpoint} &>/dev/null
            else
                mountpoint --quiet ${mountpoint} &>/dev/null && umount --verbose --recursive ${mountpoint}
            fi
        done
    done
}
