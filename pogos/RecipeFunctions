#!/bin/bash (source-only)

[[ -z ${_recipeFunctionsIncluded:-} ]] || exit
_recipeFunctionsIncluded=true

RecipeRequiredVars=(Title Name Version Supplies)
RecipeOptionalVars=(BuildIn)
RecipeRequiredFuncs=()
RecipeOptionalFuncs=(Prepare Build Trim)

declare Recipe_Collection Recipe_Token

_recipeFindInCollection ()
{
    # sets global Recipe_Token

    local name="$1"

    file="$Recipes_Home/$Recipe_Collection/$name"
    if [[ -f "$file" ]]; then
        Recipe_Token="$Recipe_Collection/$name"
        return 0
    else
        for file in "$Recipes_Home/$Recipe_Collection/$name"-*; do
            if [[ -f $file ]]; then
                Recipe_Token="$Recipe_Collection/$(basename $file)"
                return 0
            fi
        done
    fi
    file="$Recipes_Home/$Recipe_Collection/$name/Recipe"
    if [[ -f $file ]]; then
        Recipe_Token="$Recipe_Collection/$name/Recipe"
        return 0
    fi

    return 1
}

_recipeFind ()
{
    # sets global Recipe_Collection / Recipe_Token

    Recipe_Collection="$(dirname $Recipe_Token)"
    local name="$(basename $Recipe_Token)"
    local path

    if [[ "$Recipe_Collection" == "." ]]; then
        for Recipe_Collection in "${Recipes_Collections[@]}"; do
            if _recipeFindInCollection "$name"; then
                return 0
            fi
        done
    else
        if _recipeFindInCollection "$name"; then
            return 0
        fi
    fi
    
    Fatal "can't resolve recipe token '$Recipe_Token'"
}

_recipeUnset () 
{ 
    unset "${RecipeRequiredVars[@]}" "${RecipeRequiredFuncs[@]}" "${RecipeOptionalVars[@]}" "${RecipeOptionalFuncs[@]}"
}

_recipeSource ()
{
    Recipe_Token=${1:-}

    if [[ -z $Recipe_Token ]]; then
        Fatal "no recipe token given"
    fi

    _recipeUnset
    _recipeFind
    
    source "$Recipes_Home/$Recipe_Token"

    local savedRecipe_Collection="$Recipe_Collection"
    local savedTitle="$Title"
    while [[ -n "${Redirect:-}" ]]; do
        Recipe_Token="$Redirect"
        unset Redirect
        _recipeUnset
        _recipeFind
        source "$Recipes_Home/$Recipe_Token"
    done
    Recipe_Collection="$savedRecipe_Collection"
    Title="$savedTitle"

    local variable
    for variable in "${RecipeRequiredVars[@]}"; do
        if [[ ! -v ${variable} ]]; then
            Fatal "required variable '$variable' missing in receipe '$Recipe_Token'"
        fi
    done
    for variable in "${RecipeOptionalVars[@]}"; do
        if [[ ! -v ${variable} ]]; then
            eval "declare $variable=''"
        fi
    done
    local function
    for function in "${RecipeRequiredFuncs[@]}"; do
        if [[ ! "$(type -t $function)" == "function" ]]; then
            Fatal "required function '$function' missing in receipe '$Recipe_Token'"
        fi
    done
    for function in "${RecipeOptionalFuncs[@]}"; do
        if [[ ! "$(type -t $function)" == "function" ]]; then
            eval "$function () { :; }"
        fi
    done

    declare -p Recipe_Collection | sed 's/ -- / -g /'
    declare -p Recipe_Token | sed 's/ -- / -g /'
    declare -p Title | sed 's/-- Title=/-g Recipe_Title=/'
    declare -p Name | sed 's/-- Name=/-g Recipe_Name=/'
    declare -p Version | sed 's/-- Version=/-g Recipe_Version=/'
    declare -p Supplies | sed 's/-a Supplies=/-ga Recipe_Supplies=/'
    declare -p BuildIn | sed 's/-- BuildIn=/-g Recipe_BuildIn=/'
    echo -n 'Recipe_' ; declare -pf Prepare
    echo -n 'Recipe_' ; declare -pf Build
    echo -n 'Recipe_' ; declare -pf Trim
}

RecipeDump ()
{
    declare -p Recipe_Collection
    declare -p Recipe_Token
    declare -p Recipe_Title
    declare -p Recipe_Name
    declare -p Recipe_Version
    declare -p Recipe_Supplies
    declare -p Recipe_BuildIn
    declare -pf Recipe_Prepare
    declare -pf Recipe_Build
    declare -pf Recipe_Trim
}

RecipeSource ()
{
    local content
    content=$(_recipeSource ${1:-})
    eval "$content"
}
